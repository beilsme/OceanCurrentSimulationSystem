# ============================================================================
# 洋流模拟系统Docker Compose配置
# 放置位置: Deployment/Docker/docker-compose.yml
# ============================================================================

version: '3.8'

services:
  # Python引擎服务
  python-engine:
    build:
      context: ../../
      dockerfile: Deployment/Docker/Dockerfile.python
    container_name: ocean-sim-python
    ports:
      - "8000:8000"
    volumes:
      - ../../Data:/app/Data
      - ../../Logs:/app/Logs
      - ../../Configuration:/app/Configuration
      - cpp-build:/app/Build/Release/Cpp
    environment:
      - OCEAN_SIM_ROOT=/app
      - OCEAN_SIM_DATA=/app/Data
      - OCEAN_SIM_CONFIG=/app/Configuration
      - PYTHONPATH=/app/Source/PythonEngine
    networks:
      - ocean-sim-network
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: ocean-sim-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - ocean-sim-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL数据库服务
  postgres:
    image: postgres:15-alpine
    container_name: ocean-sim-postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    environment:
      - POSTGRES_DB=oceandb
      - POSTGRES_USER=oceanuser
      - POSTGRES_PASSWORD=oceanpass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    networks:
      - ocean-sim-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U oceanuser -d oceandb"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理服务
  nginx:
    image: nginx:alpine
    container_name: ocean-sim-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ../../Assets/web:/usr/share/nginx/html:ro
    networks:
      - ocean-sim-network
    restart: unless-stopped
    depends_on:
      - python-engine
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控服务 (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: ocean-sim-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ocean-sim-network
    restart: unless-stopped

  # 可视化服务 (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: ocean-sim-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=oceanpass
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - ocean-sim-network
    restart: unless-stopped
    depends_on:
      - prometheus

# 网络配置
networks:
  ocean-sim-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷配置
volumes:
  cpp-build:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local